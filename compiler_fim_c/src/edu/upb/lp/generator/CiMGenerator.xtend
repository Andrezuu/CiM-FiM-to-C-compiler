/*
 * generated by Xtext 2.35.0
 */
package edu.upb.lp.generator

import edu.upb.lp.ciM.Function
import edu.upb.lp.ciM.Program
import edu.upb.lp.ciM.Variable
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CiMGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		val p = resource.allContents.head as Program
		fsa.generateFile(p.name + ".cpp", generateProgram(p));
	}

	def generateProgram(Program p) '''
	#include <iostream>
	using namespace std;
	«FOR atribute : p.atributtes» «atribute.type» «atribute.name» = «atribute.value»";" «ENDFOR»
	«FOR function: p.func» «processFunction(function)» «ENDFOR» 
	«««		int main() {
«««			«FOR f: p.func»cout<<"«f.toEval»"<<endl;«ENDFOR»
«««			return 0;
«««		}
	'''
	
	def processFunction(Function function) { '''
		«function.returnType» «function.name» 
		(«function.params.head» «FOR paramsToAdd: function.params.tail» «ENDFOR»{
			«FOR variables: function.vars» «ENDFOR»			
			
	}	
	
	'''
	}
	
	
	def processVariables(Variable variable) {
		
	}
}
