grammar edu.upb.lp.CiM with org.eclipse.xtext.common.Terminals

generate ciM "http://www.upb.edu/lp/CiM"

Program:
	"Dear Princess Celestia:" name=ID "{"
	atributtes+=Variable*
	func+=Function*
	"Today" main=Function
	"}"
	"Your faithful student, CiM Compiler;";

Function:
	"I learned" name=ID 'using'? '(' (params+=Parameter (',' params+=Parameter)*)? ')' (('with' | 'to get') returnType=Type)?
	vars+=Variable*
	toEval=Expression ";"
	("Then you get" returnValue=Expression)?
	"That's all about" nameClose=ID
;

FunctionCall:
	("I would" | "I remembered")? function=[Function] 'using' '(' (args+=Expression (',' args+=Expression)*)? ')' ";"
;

Parameter:
	name=ID ":" type=Type;

Type:
	"Bool" | "Int" | "String";

Literal:
	BooleanLiteral | IntLiteral | StringLiteral;
	
IntLiteral:
	{IntLiteral} value=INT // HACER COMO BOOLEAN LITERAL INVESTIGAR UNASSIGNED RULE CALL
;

StringLiteral:
	{StringLiteral} value=STRING // HACER COMO BOOLEAN LITERAL
;

BooleanLiteral:
	{BooleanLiteral} (value ?= ("yes" | "true" | "right" | "correct")) | {BooleanLiteral} ( value ?= ("false" | "incorrect" | "no" | "wrong"));

Variable:
	"Did you know that" name=ID ("is" | "was" | "has" | "had" | "like" | "likes" | "liked") type=Type value=Expression ";";

Expression:
	Literal | var=[Variable] | FunctionCall;


ArithmeticExpr:
	STRING//	Expression "added to" Expression |
//	Expression "plus" Expression |
//	Expression "minus" Expression |
//	Expression "without" Expression |
//	Expression "multiplied with" Expression |
//	Expression "times" Expression |
//	Expression "divided by" Expression	
;
