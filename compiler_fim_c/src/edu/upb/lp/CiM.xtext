grammar edu.upb.lp.CiM with org.eclipse.xtext.common.Terminals

generate ciM "http://www.upb.edu/lp/CiM"

Program:
	"Dear Princess Celestia:" name=ID "{"
	declarations+=Declaration*
	"Today" main=Function
	"}"
	"Your faithful student," coderName=ID ".";

Function:
	"I learned" name=ID 'using'? '(' (params+=Parameter (',' params+=Parameter)*)? ')' ('with'
	returnType=Type)? "{"
	instructions+=Instruction*
	"That's all about" nameClose=ID "}";

Instruction:
	Variable | Statement | FunctionCall | Return | Increment | Decrement;

Return:
	"Then you get" val=Expression;

Declaration:
	Variable | Function;

FunctionCall:
	("I would" | "I remembered")? function=[Function] 'using' '(' (args+=Expression (',' args+=Expression)*)? ')' ;

Parameter returns Variable:
	name=ID ":" type=Type;

Type:
	"Bool" | "Int" | "String" | "Int[]" | "Bool[]";

Expression:
	NoTypeExpression | IntExpression | BooleanExpression | StringLiteral | IntArrayLiteral | BooleanArrayLiteral;

Statement:
	Print | Input | IfStatement | ForStatement | WhileStatement | DoWhileStatement |
	VariableAssignment;

IntLiteral:
	{IntLiteral} value=INT;

StringLiteral:
	{StringLiteral} value=STRING;

BooleanLiteral:
	value=(TrueLiteral | FalseLiteral);

TrueLiteral:
	{TrueLiteral} (value?=('yes' | 'true' | 'right' | 'correct'));

FalseLiteral:
	{FalseLiteral} (value?=('no' | 'false' | 'incorrect' | 'wrong'));

IntArrayLiteral:
	'[' values+=INT (',' values+=INT)* ']';

BooleanArrayLiteral:
	'[' values+=BooleanLiteral (',' values+=BooleanLiteral)* ']';

Variable:
	("Did you know that")? name=ID
	(("is" | "was" | "has" | "had" | "like" | "likes" | "liked"))? type=Type (value=Expression)? ";";

VariableReference:
	var=[Variable];

IntExpression:
	IntLiteral | MathExpression | ref=[Variable];

NoTypeExpression:
	VariableReference | FunctionCall;

MathExpression:
	Sum | Substraction | Multiplication | Division;//Increment | Decrement | 

BooleanExpression:
	BooleanLiteral | Comparison;

Comment:
	("P.")+ "S." comment=STRING;

// OPERADORES
Increment:
	"gotOneMore" var=[Variable];

Decrement:
	"gotOneLess" var=[Variable];

Sum:
	("add" val1=Expression "and" val2=Expression);

Substraction:
	("substract" | "the difference between") val1=Expression "and" val2=Expression;

Multiplication:
	("multiply" val1=Expression "and" val2=Expression);

Division:
	("divide" val1=Expression ("and" | "by") val2=Expression);

VariableAssignment returns Variable:
	VariableReference ("is now" | "are now" | "now likes" | "now like" | "become" | "becomes") value=Expression;

Print:
	"I " ("said" | "wrote" | "sang" | "thought") value=Expression ;

Input:
	"I " ("heard" | "read" | "asked") var=[Variable] (prompt=STRING)? ;

//COMPRACIONES
Comparison:
	Equal | NotEqual | LessThan | LessThanOrEqual | MoreThan | MoreThanOrEqual;

Comparador:
	"is" | "was" | "has" | "had";

Equal:
	Comparador "equal to" val1=Expression val2=Expression;

NotEqual:
	Comparador "not equal to" val1=Expression val2=Expression;

LessThan:
	Comparador "less than" val1=Expression val2=Expression;

LessThanOrEqual:
	Comparador "less or equal to" val1=Expression val2=Expression;

MoreThan:
	Comparador ("more" | "greater") "than" val1=Expression val2=Expression;

MoreThanOrEqual:
	Comparador "more or equal to" val1=Expression val2=Expression;

//INSTRUCCIONES DE CONTROL DE FLUJO
//Conditional
IfStatement:
	("If" | "When") condition=Expression "then"
	instructions+=Instruction*
	("That's what I would do" | else=ElseStatement);

ElseStatement:
	("Otherwise" | "Or else")
	instructions+=Instruction*
	"That's what I would do";

WhileStatement:
	"As long as" "("condition=Expression")"
	instructions+=Instruction*
	"That's what I did";

DoWhileStatement:
	"Here's what I did"
	instructions+=Instruction*
	"I did this" ("while" | "as long as") "("condition=Expression")";

ForStatement:
	"For every" var=Variable "from" val1=Expression"to" val2=Expression
	instructions+=Instruction*
	"That's what I did";

//ForEachStatement:
//	"For every" var=Variable "in" arrayValue=Literal "{"
//	vars+=Variable*
////	assigns+=VariableAssignment*
////	expr+=Expression*
//	"That's what I did"
//	"}";
