/*
 * generated by Xtext 2.35.0
 */
package edu.upb.lp.validation;

import java.util.Set;

import org.eclipse.xtext.validation.Check;

import edu.upb.lp.ciM.BooleanLiteral;
import edu.upb.lp.ciM.CiMPackage;
import edu.upb.lp.ciM.Expression;
import edu.upb.lp.ciM.Function;
import edu.upb.lp.ciM.Variable;
import edu.upb.lp.ciM.VariableReference;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CiMValidator extends AbstractCiMValidator {

//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					CiMPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}

////	@Check
////	public void isFunctionOpenEqualClose(Function f) {
////		if (!(f.getName().equals(f.getNameClose()))) {
////			error("Closing name should be the same as header", CiMPackage.Literals.FUNCTION__NAME_CLOSE);
////		}
////	}

//	@Check
//	public void checkType(Variable v) {
//		Expression value = v.getValue();
//		String type = v.getType();
//		Set<String> boolLiterals = Set.of("yes", "true", "right", "correct");
//		if (type.equals("Int")) {
//			try {
//				Integer.parseInt(value);
//			} catch (NumberFormatException e) {
//				error("Type mismatch: Expected an integer value.", CiMPackage.Literals.VARIABLE__VALUE);
//			}
//		}
//		if (type.equals("Bool") && !boolLiterals.contains(value)) {
//			error("Type mismatch: Expected a boolean value.", CiMPackage.Literals.VARIABLE__VALUE);
//		}
//		if (type.equals("String") && !(value.startsWith("\"") && value.endsWith("\""))) {
//			error("Type mismatch: Expected a string between double quotes", CiMPackage.Literals.VARIABLE__VALUE);
//		}
//	}

	public static final String INVALID_NAME = "invalidName";
    public static final String TYPE_MISMATCH = "typeMismatch";
    public static final String UNDECLARED_VARIABLE = "undeclaredVariable";
    public static final String INVALID_BOOLEAN_LITERAL = "invalidBooleanLiteral";

    @Check
    public void isFunctionOpenEqualClose(Function f) {
        if (!(f.getName().equals(f.getNameClose()))) {
            error("No es igual al nombre de la Funcion WEY!!!", CiMPackage.Literals.FUNCTION__NAME_CLOSE);
        }
    }

    @Check
    public void checkVariableType(Variable v) {
        Expression value = v.getValue();
        String type = v.getType();
        if (value == null) {
            return;
        }

        if (type.equals("Int")) {
            if (!(value instanceof edu.upb.lp.ciM.IntLiteral)) {
                error("y el Int??", CiMPackage.Literals.VARIABLE__VALUE);
            }
        } else if (type.equals("Bool")) {
            if (!(value instanceof edu.upb.lp.ciM.BooleanLiteral)) {
                error("Y el boolean??", CiMPackage.Literals.VARIABLE__VALUE);
            }
        } else if (type.equals("String")) {
            if (!(value instanceof edu.upb.lp.ciM.StringLiteral)) {
                error("Y el String??", CiMPackage.Literals.VARIABLE__VALUE);
            }
        }
    }

    @Check
    public void checkVariableReference(VariableReference ref) {
        if (ref.getVar() == null) {
            error("Y la referencia??", CiMPackage.Literals.VARIABLE_REFERENCE__VAR);
        }
    }

	
	
}
